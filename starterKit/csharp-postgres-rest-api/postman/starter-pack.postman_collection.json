{
	"info": {
		"_postman_id": "b228ba2a-36a5-422f-8bc0-709aa8e8b759",
		"name": ".NET 8 User API - Complete CRUD Tests",
		"description": "Complete test suite for User Management API with .NET 8\n\nTests include:\n- ✅ CRUD operations\n- ✅ Validation tests (email, phone, required fields)\n- ✅ Error handling (not found, duplicates)\n- ✅ Edge cases\n\nRun tests in order for best results!",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Get All Users (Empty)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{url}}/api/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					]
				},
				"description": "Get all users from the database. Should return empty array initially."
			},
			"response": []
		},
		{
			"name": "2. Create User - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Returns user ID\", function () {",
							"    var userId = pm.response.json();",
							"    pm.expect(userId).to.be.a('number');",
							"    pm.environment.set(\"userId\", userId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phoneNumber\": \"+1234567890\"\n}"
				},
				"url": {
					"raw": "{{url}}/api/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					]
				},
				"description": "Create a new user with valid data. Returns the user ID."
			},
			"response": []
		},
		{
			"name": "3. Get All Users (With Data)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Has at least one user\", function () {",
							"    var users = pm.response.json();",
							"    pm.expect(users.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{url}}/api/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					]
				},
				"description": "Get all users again - should now show the created user."
			},
			"response": []
		},
		{
			"name": "4. Create User - Duplicate Email (Error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Returns error message\", function () {",
							"    var response = pm.response.json();",
							"    pm.expect(response).to.have.property('message');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Jane Smith\",\n    \"email\": \"john.doe@example.com\",\n    \"phoneNumber\": \"+0987654321\"\n}"
				},
				"url": {
					"raw": "{{url}}/api/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					]
				},
				"description": "Try to create user with duplicate email - should fail with 400."
			},
			"response": []
		},
		{
			"name": "5. Create User - Invalid Email (Error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"invalid-email\",\n    \"phoneNumber\": \"+1234567890\"\n}"
				},
				"url": {
					"raw": "{{url}}/api/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					]
				},
				"description": "Try to create user with invalid email format - should fail."
			},
			"response": []
		},
		{
			"name": "6. Create User - Empty Fields (Error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"\",\n    \"email\": \"\",\n    \"phoneNumber\": \"\"\n}"
				},
				"url": {
					"raw": "{{url}}/api/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					]
				},
				"description": "Try to create user with empty required fields - should fail."
			},
			"response": []
		},
		{
			"name": "7. Update User - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"John Updated\",\n    \"email\": \"john.updated@example.com\",\n    \"phoneNumber\": \"+9876543210\"\n}"
				},
				"url": {
					"raw": "{{url}}/api/users/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"1"
					]
				},
				"description": "Update the user with ID 1. Should succeed if user exists."
			},
			"response": []
		},
		{
			"name": "8. Update User - Not Found (Error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Non Existent\",\n    \"email\": \"nonexistent@example.com\",\n    \"phoneNumber\": \"+0000000000\"\n}"
				},
				"url": {
					"raw": "{{url}}/api/users/999",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"999"
					]
				},
				"description": "Try to update non-existent user - should return 404."
			},
			"response": []
		},
		{
			"name": "9. Delete User - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{url}}/api/users/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"1"
					]
				},
				"description": "Delete user with ID 1. Should succeed if user exists."
			},
			"response": []
		},
		{
			"name": "10. Delete User - Not Found (Error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{url}}/api/users/999",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"999"
					]
				},
				"description": "Try to delete non-existent user - should return 404."
			},
			"response": []
		}
	]
}
